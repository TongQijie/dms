<dataCommands>

  <!-- *********************************** -->
  <!-- Device Info: about Device Base Info -->
  <!-- *********************************** -->
  
  <dataCommand name="DeviceInfo_AddDevice" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Status CHAR(1)
SELECT @Status = [Status] FROM dms_coredb.dbo.DeviceInfo WHERE DeviceNumber = @DeviceNumber
IF @Status IS NULL
BEGIN
  INSERT INTO dms_coredb.dbo.DeviceInfo (DeviceNumber, DeviceName, Manufactory, DateOfManufacture, Model, Category, DeviceIP, DevicePort, DeviceSIM, PeriodOfMAintenance, ProductionAbility, MaintenanceMaunal)
  VALUES (@DeviceNumber, @DeviceName, @Manufactory, @DateOfManufacture, @Model, @Category, @DeviceIP, @DevicePort, @DeviceSIM, @PeriodOfMAintenance, @ProductionAbility, @MaintenanceMaunal);
  SET @RetVal = 0
END
ELSE IF @Status = 'N'
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.DeviceInfo
     SET DeviceName = @DeviceName
       , Manufactory = @Manufactory
  	   , DateOfManufacture = @DateOfManufacture
       , Model = @Model
       , Category = @Category
       , DeviceIP = @DeviceIP
       , DevicePort = @DevicePort
       , DeviceSIM = @DeviceSIM
       , PeriodOfMAintenance = @PeriodOfMAintenance
       , ProductionAbility = @ProductionAbility
       , MaintenanceMaunal = @MaintenanceMaunal
       , [Status] = 'A'
       , CreationDate = GETDATE()
       , ModifiedDate = GETDATE()
   WHERE DeviceNumber = @DeviceNumber
     AND [Status] = 'N'
  SET @RetVal = 0
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@Manufactory" dbType="String" direction="Input" Size="60" />
      <param name="@DateOfManufacture" dbType="DateTime" direction="Input" />
      <param name="@Model" dbType="String" direction="Input" Size="60" />
      <param name="@Category" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceIP" dbType="String" direction="Input" Size="20" />
      <param name="@DevicePort" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceSIM" dbType="String" direction="Input" Size="20" />
      <param name="@PeriodOfMAintenance" dbType="String" direction="Input" Size="20" />
      <param name="@ProductionAbility" dbType="String" direction="Input" Size="20" />
      <param name="@MaintenanceMaunal" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="DeviceInfo_EditDevice" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo WHERE DeviceNumber = @DeviceNumber AND Status = 'A')
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.DeviceInfo
     SET DeviceName = @DeviceName
       , Manufactory = @Manufactory
  	   , DateOfManufacture = @DateOfManufacture
       , Model = @Model
       , Category = @Category
       , DeviceIP = @DeviceIP
       , DevicePort = @DevicePort
       , DeviceSIM = @DeviceSIM
       , PeriodOfMAintenance = @PeriodOfMAintenance
       , ProductionAbility = @ProductionAbility
       , MaintenanceMaunal = @MaintenanceMaunal
       , ModifiedDate = GETDATE()
   WHERE DeviceNumber = @DeviceNumber
     AND [Status] = 'A'
  SET @RetVal = 0
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@Manufactory" dbType="String" direction="Input" Size="60" />
      <param name="@DateOfManufacture" dbType="DateTime" direction="Input" />
      <param name="@Model" dbType="String" direction="Input" Size="60" />
      <param name="@Category" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceIP" dbType="String" direction="Input" Size="20" />
      <param name="@DevicePort" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceSIM" dbType="String" direction="Input" Size="20" />
      <param name="@PeriodOfMAintenance" dbType="String" direction="Input" Size="20" />
      <param name="@ProductionAbility" dbType="String" direction="Input" Size="20" />
      <param name="@MaintenanceMaunal" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="DeviceInfo_DeleteDevice" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo WHERE DeviceNumber = @DeviceNumber AND Status = 'A')
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.DeviceInfo
     SET [Status] = 'N'
   WHERE DeviceNumber = @DeviceNumber
     AND [Status] = 'A'
  SET @RetVal = 0
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>
  
  <dataCommand name="DeviceInfo_QueryDevicesByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
  FROM dms_coredb.dbo.DeviceInfo
 WHERE [Status] = 'A'
   AND (@DeviceNumber IS NULL OR DeviceNumber = @DeviceNumber)
   AND (@DeviceName IS NULL OR DeviceName = @DeviceName)
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT a.DeviceNumber
     , a.DeviceName
     , a.Manufactory
     , a.DateOfManufacture
     , a.Model
     , a.Category
     , a.DeviceIP
     , a.DevicePort
     , a.DeviceSIM
     , a.PeriodOfMaintenance
     , a.ProductionAbility
     , a.MaintenanceMaunal
     , a.CreationDate
     , a.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY CreationDate DESC) AS RowNumber
             , DeviceNumber
             , DeviceName
             , Manufactory
             , DateOfManufacture
             , Model
             , Category
             , DeviceIP
             , DevicePort
             , DeviceSIM
             , PeriodOfMaintenance
             , ProductionAbility
             , MaintenanceMaunal
             , CreationDate
             , ModifiedDate
          FROM dms_coredb.dbo.DeviceInfo
         WHERE [Status] = 'A'
           AND (@DeviceNumber IS NULL OR DeviceNumber = @DeviceNumber)
           AND (@DeviceName IS NULL OR DeviceName = @DeviceName)) AS a
 WHERE a.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY a.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <!-- **************************************** -->
  <!-- Maintenance Info: about Maintenance Plan -->
  <!-- **************************************** -->

  <dataCommand name="MaintenanceInfo_AddPlan" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo 
            WHERE (@DeviceNumber IS NULL OR DeviceNumber = @DeviceNumber)
              AND [Status] = 'A')
BEGIN
  INSERT INTO dms_coredb.dbo.MaintenancePlan(DeviceNumber, PeriodFrom, PeriodTo, ScheduleType, ScheduleValue, Content, Remark)
  VALUES (@DeviceNumber, @PeriodFrom, @PeriodTo, @ScheduleType, @ScheduleValue, @Content, @Remark)
  SELECT @RetVal = SCOPE_IDENTITY()
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@PeriodFrom" dbType="DateTime" direction="Input" Size="12" />
      <param name="@PeriodTo" dbType="DateTime" direction="Input" Size="12" />
      <param name="@ScheduleType" dbType="String" direction="Input" Size="1" />
      <param name="@ScheduleValue" dbType="String" direction="Input" Size="100" />
      <param name="@Content" dbType="String" direction="Input" Size="200" />
      <param name="@Remark" dbType="String" direction="Input" Size="100" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="MaintenanceInfo_EditPlan" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.MaintenancePlan WHERE Id = @Id AND [Status] = 'A')
BEGIN
  SET @RetVal = -1
END
ELSE IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo 
                     WHERE (@DeviceNumber IS NULL OR DeviceNumber = @DeviceNumber)
                       AND [Status] = 'A')
BEGIN
  SET @RetVal = -2
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.MaintenancePlan
     SET DeviceNumber = @DeviceNumber
       , PeriodFrom = @PeriodFrom
       , PeriodTo = @PeriodTo
       , ScheduleType = @ScheduleType
       , ScheduleValue = @ScheduleValue
       , Content = @Content
       , Remark = @Remark
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@PeriodFrom" dbType="DateTime" direction="Input" Size="12" />
      <param name="@PeriodTo" dbType="DateTime" direction="Input" Size="12" />
      <param name="@ScheduleType" dbType="String" direction="Input" Size="1" />
      <param name="@ScheduleValue" dbType="String" direction="Input" Size="100" />
      <param name="@Content" dbType="String" direction="Input" Size="200" />
      <param name="@Remark" dbType="String" direction="Input" Size="100" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="MaintenanceInfo_DeletePlan" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.MaintenancePlan WHERE Id = @Id AND [Status] = 'A')
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.MaintenancePlan
     SET [Status] = 'N'
   WHERE Id = @Id
  
  UPDATE dms_coredb.dbo.MaintenanceRecord
     SET [Status] = 'C'
   WHERE MaintenancePlanId = @Id

  SET @RetVal = 0
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="MaintenanceInfo_QueryMaintenancePlansByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
  FROM dms_coredb.dbo.MaintenancePlan AS a
     , dms_coredb.dbo.DeviceInfo AS b
 WHERE a.DeviceNumber = b.DeviceNumber
   AND a.[Status] = 'A'
   AND b.[Status] = 'A'
   AND (@Id = 0 OR a.Id = @Id)
   AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT c.Id
     , c.Dev_DeviceNumber
     , c.Dev_DeviceName
     , c.[Status]
     , c.PeriodFrom
     , c.PeriodTo
     , c.ScheduleType
     , c.ScheduleValue
     , c.Content
     , c.Remark
     , c.CreationDate
     , c.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CreationDate DESC) AS RowNumber
             , a.Id
             , a.DeviceNumber AS 'Dev_DeviceNumber'
             , a.DeviceName AS 'Dev_DeviceName'
             , a.[Status]
             , a.PeriodFrom
             , a.PeriodTo
             , a.ScheduleType
             , a.ScheduleValue
             , a.Content
             , a.Remark
             , a.CreationDate
             , a.ModifiedDate
          FROM dms_coredb.dbo.MaintenancePlan AS a
             , dms_coredb.dbo.DeviceInfo AS b
         WHERE a.DeviceNumber = b.DeviceNumber
           AND a.[Status] = 'A'
           AND b.[Status] = 'A'
           AND (@Id = 0 OR a.Id = @Id)
           AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)) AS c
 WHERE c.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY c.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <!-- ****************************************** -->
  <!-- Maintenance Info: about Maintenance Record -->
  <!-- ****************************************** -->

  <dataCommand name="MaintenanceInfo_AddRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo WHERE DeviceNumber = @DeviceNumber AND [Status] = 'A')
BEGIN
  SET @RetVal = -1
END
ELSE IF (@MaintenancePlanId != 0) 
  AND NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.MaintenancePlan WHERE Id = @MaintenancePlanId AND [Status] = 'A')
BEGIN
  SET @RetVal = -2
END
ELSE
BEGIN
  INSERT INTO dms_coredb.dbo.MaintenanceRecord(DeviceNumber, MaintenancePlanId, ScheduleTime, MaintainBeginTime, MaintainEndTime, Persons, Content, Remark)
  VALUES (@DeviceNumber, @MaintenancePlanId, @ScheduleTime, @MaintainBeginTime, @MaintainEndTime, @Persons, @Content, @Remark)
  SELECT @RetVal = SCOPE_IDENTITY()
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@MaintenancePlanId" dbType="Int32" direction="Input" Size="4" />
      <param name="@ScheduleTime" dbType="DateTime" direction="Input" Size="12" />
      <param name="@MaintainBeginTime" dbType="DateTime" direction="Input" Size="12" />
      <param name="@MaintainEndTime" dbType="DateTime" direction="Input" Size="12"/>
      <param name="@Persons" dbType="String" direction="Input" Size="100" />
      <param name="@Content" dbType="String" direction="Input" Size="200" />
      <param name="@Remark" dbType="String" direction="Input" Size="100" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="MaintenanceInfo_EditRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.MaintenanceRecord WHERE Id = @Id AND [Status] != 'N')
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.MaintenanceRecord
     SET [Status] = @Status
       , MaintenanceTime = @MaintenanceTime
       , Persons = @Persons
       , Content = @Content
       , Remark = @Remark
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@Status" dbType="String" direction="Input" Size="1" />
      <param name="@MaintenanceTime" dbType="DateTime" direction="Input" />
      <param name="@Persons" dbType="String" direction="Input" Size="120" />
      <param name="@Content" dbType="String" direction="Input" Size="120" />
      <param name="@Remark" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="MaintenanceInfo_DeleteRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.MaintenanceRecord WHERE Id = @Id AND [Status] != 'N')
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.MaintenanceRecord
     SET [Status] = 'N'
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="MaintenanceInfo_QueryMaintenanceRecordsByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
  FROM dms_coredb.dbo.MaintenanceRecord AS a
  LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
  LEFT JOIN dms_coredb.dbo.MaintenancePlan AS c ON a.MaintenancePlanId = c.Id
 WHERE a.[Status] != 'N'
   AND (@Id = 0 OR a.Id = @Id)
   AND (b.DeviceNumber IS NULL OR b.[Status] = 'A')
   AND (c.Id IS NULL OR c.[Status] = 'A')
   AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
   AND (@MaintenancePlanId = 0 OR c.Id = @MaintenancePlanId)
   AND (@Persons IS NULL OR a.Persons = @Persons)
   AND a.[Status] IN (@Status)
   AND (@StartTime IS NULL OR (a.MaintenanceTime IS NOT NULL AND DATEDIFF(SECOND, @StartTime, a.MaintenanceTime) > 0))
   AND (@EndTime IS NULL OR (a.MaintenanceTime IS NOT NULL AND DATEDIFF(SECOND, a.MaintenanceTime, @EndTime) > 0))
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT d.Id
     , d.Dev_DeviceNumber
     , d.Dev_DeviceName
     , d.[Status]
     , d.Plan_Id
     , d.Content
     , d.MaintenanceTime
     , d.Persons
     , d.Remark
     , d.CreationDate
     , d.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CreationDate DESC) AS RowNumber
             , a.Id
             , b.DeviceNumber AS 'Dev_DeviceNumber'
             , b.DeviceName AS 'Dev_DeviceName'
             , a.[Status]
             , c.Id AS 'Plan_Id'
             , a.Content
             , a.MaintenanceTime
             , a.Persons
             , a.Remark
             , a.CreationDate
             , a.ModifiedDate
          FROM dms_coredb.dbo.MaintenanceRecord AS a
          LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
          LEFT JOIN dms_coredb.dbo.MaintenancePlan AS c ON a.MaintenancePlanId = c.Id
         WHERE a.[Status] != 'N'
           AND (@Id = 0 OR a.Id = @Id)
           AND (b.DeviceNumber IS NULL OR b.[Status] = 'A')
           AND (c.Id IS NULL OR c.[Status] = 'A')
           AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
           AND (@MaintenancePlanId = 0 OR c.Id = @MaintenancePlanId)
           AND (@Persons IS NULL OR a.Persons = @Persons)
           AND a.[Status] IN (@Status)
           AND (@StartTime IS NULL OR (a.MaintenanceTime IS NOT NULL AND DATEDIFF(SECOND, @StartTime, a.MaintenanceTime) > 0))
           AND (@EndTime IS NULL OR (a.MaintenanceTime IS NOT NULL AND DATEDIFF(SECOND, a.MaintenanceTime, @EndTime) > 0))) AS d
 WHERE d.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY d.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@MaintenancePlanId" dbType="Int32" direction="Input" Size="4" />
      <param name="@Persons" dbType="String" direction="Input" size="120" />
      <param name="@Status" dbType="String" direction="Input" Size="4" />
      <param name="@StartTime" dbType="DateTime" direction="Input" />
      <param name="@EndTime" dbType="DateTime" direction="Input" />
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <!-- ************************************** -->
  <!-- Inspection Info: about Inspection Plan -->
  <!-- ************************************** -->
  
  <dataCommand name="InspectionInfo_AddPlan" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo 
            WHERE (@DeviceNumber IS NULL OR DeviceNumber = @DeviceNumber)
              AND (@DeviceName IS NULL OR DeviceName = @DeviceName)
              AND [Status] = 'A')
BEGIN
  INSERT INTO dms_coredb.dbo.InspectionPlan(DeviceNumber, DeviceName, Flag, PlanValue, Content)
  VALUES (@DeviceNumber, @DeviceName, @Flag, @PlanValue, @Content)
  SELECT @RetVal = SCOPE_IDENTITY()
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@Flag" dbType="Int32" direction="Input" Size="4" />
      <param name="@PlanValue" dbType="String" direction="Input" Size="120" />
      <param name="@Content" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="InspectionInfo_EditPlan" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.InspectionPlan WHERE Id = @Id AND [Status] = 'A')
BEGIN
  SET @RetVal = -1
END
ELSE IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo 
                     WHERE (@DeviceNumber IS NULL OR DeviceNumber = @DeviceNumber)
                       AND (@DeviceName IS NULL OR DeviceName = @DeviceName)
                       AND [Status] = 'A')
BEGIN
  SET @RetVal = -2
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.InspectionPlan
     SET DeviceNumber = @DeviceNumber
       , DeviceName = @DeviceName
       , Flag = @Flag
       , PlanValue = @PlanValue
       , Content = @Content
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@Flag" dbType="Int32" direction="Input" Size="4" />
      <param name="@PlanValue" dbType="String" direction="Input" Size="120" />
      <param name="@Content" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="InspectionInfo_DeletePlan" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.InspectionPlan WHERE Id = @Id AND [Status] = 'A')
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.InspectionPlan
     SET [Status] = 'V'
   WHERE Id = @Id
  SET @RetVal = 0
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="InspectionInfo_QueryInspectionPlansByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
  FROM dms_coredb.dbo.InspectionPlan AS a
  LEFT JOIN dms_coredb.dbo.DeviceInfo AS b
    ON a.DeviceNumber = b.DeviceNumber
 WHERE a.[Status] = 'A'
   AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
   AND (@DeviceName IS NULL OR a.DeviceName = @DeviceName)
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT c.Id
     , c.Dev_DeviceNumber
     , c.Dev_DeviceName
     , c.Flag
     , c.PlanValue
     , c.Content
     , c.CreationDate
     , c.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CreationDate DESC) AS RowNumber
             , a.Id
             , a.DeviceNumber AS 'Dev_DeviceNumber'
             , a.DeviceName AS 'Dev_DeviceName'
             , a.Flag
             , a.PlanValue
             , a.Content
             , a.CreationDate
             , a.ModifiedDate
          FROM dms_coredb.dbo.InspectionPlan AS a
          LEFT JOIN dms_coredb.dbo.DeviceInfo AS b
            ON a.DeviceNumber = b.DeviceNumber
         WHERE a.[Status] = 'A'
           AND (@Id = 0 OR a.Id = @Id)
           AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
           AND (@DeviceName IS NULL OR b.DeviceName = @DeviceName)) AS c
 WHERE c.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY c.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <!-- **************************************** -->
  <!-- Inspection Info: about Inspection Record -->
  <!-- **************************************** -->

  <dataCommand name="InspectionInfo_AddRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo WHERE DeviceNumber = @DeviceNumber AND [Status] = 'A')
BEGIN
  SET @RetVal = -1
END
ELSE IF (@InspectionPlanId != 0) 
  AND NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.InspectionPlan WHERE Id = @InspectionPlanId AND [Status] = 'A')
BEGIN
  SET @RetVal = -2
END
ELSE
BEGIN
  INSERT INTO dms_coredb.dbo.InspectionRecord(DeviceNumber, [Status], InspectionPlanId, InspectionTime, Persons, Content, Remark)
  VALUES (@DeviceNumber, @Status, @InspectionPlanId, @InspectionTime, @Persons, @Content, @Remark)
  SELECT @RetVal = SCOPE_IDENTITY()
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@Status" dbType="String" direction="Input" Size="1" />
      <param name="@InspectionPlanId" dbType="Int32" direction="Input" Size="4" />
      <param name="@InspectionTime" dbType="DateTime" direction="Input" />
      <param name="@Persons" dbType="String" direction="Input" Size="120" />
      <param name="@Content" dbType="String" direction="Input" Size="120" />
      <param name="@Remark" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="InspectionInfo_EditRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.InspectionRecord WHERE Id = @Id AND [Status] != 'N')
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.InspectionRecord
     SET [Status] = @Status
       , InspectionTime = @InspectionTime
       , Persons = @Persons
       , Content = @Content
       , Remark = @Remark
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@Status" dbType="String" direction="Input" Size="1" />
      <param name="@InspectionTime" dbType="DateTime" direction="Input" />
      <param name="@Persons" dbType="String" direction="Input" Size="120" />
      <param name="@Content" dbType="String" direction="Input" Size="120" />
      <param name="@Remark" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="InspectionInfo_DeleteRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.InspectionRecord WHERE Id = @Id AND [Status] != 'N')
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.InspectionRecord
     SET [Status] = 'N'
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="InspectionInfo_QueryInspectionRecordsByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
  FROM dms_coredb.dbo.InspectionRecord AS a
  LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
  LEFT JOIN dms_coredb.dbo.InspectionPlan AS c ON a.InspectionPlanId = c.Id
 WHERE a.[Status] != 'N'
   AND (@Id = 0 OR a.Id = @Id)
   AND (b.DeviceNumber IS NULL OR b.[Status] = 'A')
   AND (c.Id IS NULL OR c.[Status] = 'A')
   AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
   AND (@InspectionPlanId = 0 OR c.Id = @InspectionPlanId)
   AND (@Persons IS NULL OR a.Persons = @Persons)
   AND a.[Status] IN (@Status)
   AND (@StartTime IS NULL OR (a.InspectionTime IS NOT NULL AND DATEDIFF(SECOND, @StartTime, a.InspectionTime) > 0))
   AND (@EndTime IS NULL OR (a.InspectionTime IS NOT NULL AND DATEDIFF(SECOND, a.InspectionTime, @EndTime) > 0))
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT d.Id
     , d.Dev_DeviceNumber
     , d.Dev_DeviceName
     , d.[Status]
     , d.Plan_Id
     , d.Content
     , d.InspectionTime
     , d.Persons
     , d.Remark
     , d.CreationDate
     , d.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CreationDate DESC) AS RowNumber
             , a.Id
             , b.DeviceNumber AS 'Dev_DeviceNumber'
             , b.DeviceName AS 'Dev_DeviceName'
             , a.[Status]
             , c.Id AS 'Plan_Id'
             , a.Content
             , a.InspectionTime
             , a.Persons
             , a.Remark
             , a.CreationDate
             , a.ModifiedDate
          FROM dms_coredb.dbo.InspectionRecord AS a
          LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
          LEFT JOIN dms_coredb.dbo.InspectionPlan AS c ON a.InspectionPlanId = c.Id
         WHERE a.[Status] != 'N'
           AND (@Id = 0 OR a.Id = @Id)
           AND (b.DeviceNumber IS NULL OR b.[Status] = 'A')
           AND (c.Id IS NULL OR c.[Status] = 'A')
           AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
           AND (@InspectionPlanId = 0 OR c.Id = @InspectionPlanId)
           AND (@Persons IS NULL OR a.Persons = @Persons)
           AND a.[Status] IN (@Status)
           AND (@StartTime IS NULL OR (a.InspectionTime IS NOT NULL AND DATEDIFF(SECOND, @StartTime, a.InspectionTime) > 0))
           AND (@EndTime IS NULL OR (a.InspectionTime IS NOT NULL AND DATEDIFF(SECOND, a.InspectionTime, @EndTime) > 0))) AS d
 WHERE d.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY d.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@InspectionPlanId" dbType="Int32" direction="Input" Size="4" />
      <param name="@Persons" dbType="String" direction="Input" size="120" />
      <param name="@Status" dbType="String" direction="Input" Size="4" />
      <param name="@StartTime" dbType="DateTime" direction="Input" />
      <param name="@EndTime" dbType="DateTime" direction="Input" />
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>
  
  <!-- ******************************** -->
  <!-- Repair Info: about Repair Record -->
  <!-- ******************************** -->
  
  <dataCommand name="RepairInfo_AddRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceInfo 
            WHERE (@DeviceNumber IS NULL OR DeviceNumber = @DeviceNumber)
              AND [Status] = 'A')
BEGIN
  INSERT INTO dms_coredb.dbo.RepairRecord(DeviceNumber, [Status], FaultTime, FaultDescription, RepairTime, Persons, Content, Remark)
  VALUES (@DeviceNumber, @Status, @FaultTime, @FaultDescription, @RepairTime, @Persons, @Content, @Remark)
  SELECT @RetVal = SCOPE_IDENTITY()
END
ELSE
BEGIN
  SET @RetVal = -1
END
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@Status" dbType="String" direction="Input" Size="1" />
      <param name="@FaultTime" dbType="DateTime" direction="Input" />
      <param name="@FaultDescription" dbType="String" direction="Input" />
      <param name="@RepairTime" dbType="DateTime" direction="Input" />
      <param name="@Persons" dbType="String" direction="Input" Size="120" />
      <param name="@Content" dbType="String" direction="Input" Size="120" />
      <param name="@Remark" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="RepairInfo_EditRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.RepairRecord WHERE Id = @Id AND [Status] != 'N')
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.RepairRecord
     SET [Status] = @Status
       , FaultTime = @FaultTime
       , FaultDescription = @FaultDescription
       , RepairTime = @RepairTime
       , Persons = @Persons
       , Content = @Content
       , Remark = @Remark
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@Status" dbType="String" direction="Input" Size="1" />
      <param name="@FaultTime" dbType="DateTime" direction="Input" />
      <param name="@FaultDescription" dbType="String" direction="Input" />
      <param name="@RepairTime" dbType="DateTime" direction="Input" />
      <param name="@Persons" dbType="String" direction="Input" Size="120" />
      <param name="@Content" dbType="String" direction="Input" Size="120" />
      <param name="@Remark" dbType="String" direction="Input" Size="120" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="RepairInfo_DeleteRecord" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.RepairRecord WHERE Id = @Id AND [Status] != 'N')
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.RepairRecord
     SET [Status] = 'N'
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="RepairInfo_QueryRepairRecordsByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
  FROM dms_coredb.dbo.RepairRecord AS a
  LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
 WHERE a.[Status] != 'N'
   AND (@Id = 0 OR a.Id = @Id)
   AND (b.DeviceNumber IS NULL OR b.[Status] = 'A')
   AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
   AND (@Persons IS NULL OR a.Persons = @Persons)
   AND a.[Status] IN (@Status)
   AND (@StartTime IS NULL OR (a.RepairTime IS NOT NULL AND DATEDIFF(SECOND, @StartTime, a.RepairTime) > 0))
   AND (@EndTime IS NULL OR (a.RepairTime IS NOT NULL AND DATEDIFF(SECOND, a.RepairTime, @EndTime) > 0))
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT d.Id
     , d.Dev_DeviceNumber
     , d.Dev_DeviceName
     , d.[Status]
     , d.FaultTime
     , d.FaultDescription
     , d.RepairTime
     , d.Content
     , d.Persons
     , d.Remark
     , d.CreationDate
     , d.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CreationDate DESC) AS RowNumber
             , a.Id
             , b.DeviceNumber AS 'Dev_DeviceNumber'
             , b.DeviceName AS 'Dev_DeviceName'
             , a.[Status]
             , a.FaultTime
             , a.FaultDescription
             , a.RepairTime
             , a.Content
             , a.Persons
             , a.Remark
             , a.CreationDate
             , a.ModifiedDate
          FROM dms_coredb.dbo.RepairRecord AS a
          LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
         WHERE a.[Status] != 'N'
           AND (@Id = 0 OR a.Id = @Id)
           AND (b.DeviceNumber IS NULL OR b.[Status] = 'A')
           AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
           AND (@Persons IS NULL OR a.Persons = @Persons)
           AND a.[Status] IN (@Status)
           AND (@StartTime IS NULL OR (a.RepairTime IS NOT NULL AND DATEDIFF(SECOND, @StartTime, a.RepairTime) > 0))
           AND (@EndTime IS NULL OR (a.RepairTime IS NOT NULL AND DATEDIFF(SECOND, a.RepairTime, @EndTime) > 0))) AS d
 WHERE d.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY d.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@Persons" dbType="String" direction="Input" size="120" />
      <param name="@Status" dbType="String" direction="Input" Size="4" />
      <param name="@StartTime" dbType="DateTime" direction="Input" />
      <param name="@EndTime" dbType="DateTime" direction="Input" />
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <!-- ********************** -->
  <!-- Device Spare Part Info -->
  <!-- ********************** -->

  <dataCommand name="SparePartInfo_AddSparePart" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceSparePart 
            WHERE SparePartNumber = @SparePartNumber)
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  INSERT INTO dms_coredb.dbo.DeviceSparePart(SparePartNumber, SparePartName, Remark)
  VALUES (@SparePartNumber, @SparePartName, @Remark)
  SELECT @RetVal = SCOPE_IDENTITY()
END
      ]]>
    </commandText>
    <params>
      <param name="@SparePartNumber" dbType="String" direction="Input" Size="20" />
      <param name="@SparePartName" dbType="String" direction="Input" Size="60" />
      <param name="@Remark" dbType="String" direction="Input" Size="100"/>
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="SparePartInfo_EditSparePart" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceSparePart 
                WHERE SparePartNumber = @SparePartNumber)
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.DeviceSparePart
     SET SparePartName = @SparePartName
  	   , Remark = @Remark
       , ModifiedDate = GETDATE()
   WHERE SparePartNumber = @SparePartNumber
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@SparePartName" dbType="String" direction="Input" Size="60" />
      <param name="@Remark" dbType="String" direction="Input" Size="100" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="SparePartInfo_DeleteSparePart" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceSparePart 
                WHERE SparePartNumber = @SparePartNumber)
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  DELETE TOP (1) dms_coredb.dbo.DeviceSparePart
   WHERE SparePartNumber = @SparePartNumber
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@SparePartNumber" dbType="String" direction="Input" Size="20" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="SparePartInfo_QuerySparePartsByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
  FROM dms_coredb.dbo.DeviceSparePart AS a
     , dms_coredb.dbo.DeviceSparePartDeviceInfoMapping AS b
     , dms_coredb.dbo.DeviceInfo AS c
 WHERE (@SparePartNumber IS NULL OR a.SparePartNumber = @SparePartNumber)
   AND a.SparePartNumber = b.SparePartNumber
   AND (@DeviceNumber IS NULL OR b.DeviceNumber = @DeviceNumber)
   AND b.DeviceNumber = c.DeviceNumber
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT d.SparePartNumber
     , d.SparePartName
     , d.Remark
     , d.DeviceNumber AS 'Dev_DeviceNumber'
     , d.DeviceName AS 'Dev_DeviceNumber'
     , d.CreationDate
     , d.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CreationDate DESC) AS RowNumber
             , a.SparePartNumber
             , a.SparePartName
             , a.Remark
             , c.DeviceNumber AS 'Dev_DeviceNumber'
             , c.DeviceName AS 'Dev_DeviceNumber'
             , a.CreationDate
             , a.ModifiedDate
          FROM dms_coredb.dbo.DeviceSparePart AS a
             , dms_coredb.dbo.DeviceSparePartDeviceInfoMapping AS b
             , dms_coredb.dbo.DeviceInfo AS c
         WHERE (@SparePartNumber IS NULL OR a.SparePartNumber = @SparePartNumber)
           AND a.SparePartNumber = b.SparePartNumber
           AND (@DeviceNumber IS NULL OR b.DeviceNumber = @DeviceNumber)
           AND b.DeviceNumber = c.DeviceNumber) AS d
 WHERE d.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY d.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@DeviceName" dbType="String" direction="Input" Size="60" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <!-- ********************** -->
  <!-- Device Checkpoint Info -->
  <!-- ********************** -->

  <dataCommand name="CheckpointInfo_AddCheckpoint" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
INSERT INTO dms_coredb.dbo.DeviceCheckpoint(DeviceNumber, [Description], Flag, UpperLimit, LowerLimit, Remark)
VALUES (@DeviceNumber, @Description, @Flag, @UpperLimit, @LowerLimit, @Remark)
SELECT @RetVal = SCOPE_IDENTITY()
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@Description" dbType="String" direction="Input" Size="60" />
      <param name="@Flag" dbType="String" direction="Input" Size="1"/>
      <param name="@UpperLimit" dbType="Decimal" direction="Input" />
      <param name="@LowerLimit" dbType="Decimal" direction="Input" />
      <param name="@Remark" dbType="String" direction="Input" Size="100"/>
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="CheckpointInfo_EditCheckpoint" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceCheckpoint 
                WHERE Id = @Id)
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  UPDATE TOP (1) dms_coredb.dbo.DeviceCheckpoint
     SET [Description] = @Description
       , Remark = @Remark
       , ModifiedDate = GETDATE()
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@Description" dbType="String" direction="Input" Size="60" />
      <param name="@Remark" dbType="String" direction="Input" Size="100"/>
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="CheckpointInfo_DeleteCheckpoint" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
IF NOT EXISTS (SELECT 1 FROM dms_coredb.dbo.DeviceCheckpoint WHERE Id = @Id)
BEGIN
  SET @RetVal = -1
END
ELSE
BEGIN
  DELETE TOP (1) dms_coredb.dbo.DeviceCheckpoint
   WHERE Id = @Id
  SET @RetVal = 0
END
      ]]>
    </commandText>
    <params>
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@RetVal" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="CheckpointInfo_QueryCheckpointsByPaging" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @Count INT
SELECT @Count = COUNT(1)
   FROM dms_coredb.dbo.DeviceCheckpoint AS a
   LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
  WHERE (@Id = 0 OR a.Id = @Id)
    AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)
SET @TotalPages = @Count / @PageSize + (CASE WHEN (@Count % @PageSize) = 0 THEN 0 ELSE 1 END)

IF @PageNumber > @TotalPages
BEGIN
  SET @PageNumber = 1
END

SELECT p.Id
     , p.Dev_DeviceNumber
     , p.Dev_DeviceName
     , p.[Description]
     , p.Flag
     , p.UpperLimit
     , p.LowerLimit
     , p.Remark
     , p.CreationDate
     , p.ModifiedDate
  FROM (SELECT ROW_NUMBER() OVER(ORDER BY a.CreationDate DESC) AS RowNumber
             , a.Id
             , b.DeviceNumber AS 'Dev_DeviceNumber'
             , b.DeviceName AS 'Dev_DeviceName'
             , a.[Description]
             , a.Flag
             , a.UpperLimit
             , a.LowerLimit
             , a.Remark
             , a.CreationDate
             , a.ModifiedDate
          FROM dms_coredb.dbo.DeviceCheckpoint AS a
          LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
         WHERE (@Id = 0 OR a.Id = @Id)
           AND (@DeviceNumber IS NULL OR a.DeviceNumber = @DeviceNumber)) AS p
 WHERE p.RowNumber BETWEEN ((@PageNumber - 1) * @PageSize + 1) AND (@PageNumber * @PageSize)
 ORDER BY p.CreationDate DESC
      ]]>
    </commandText>
    <params>
      <param name="@PageNumber" dbType="Int32" direction="Input" Size="4" />
      <param name="@PageSize" dbType="Int32" direction="Input" Size="4" />
      <param name="@Id" dbType="Int32" direction="Input" Size="4" />
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@TotalPages" dbType="Int32" direction="Output" Size="4" />
    </params>
  </dataCommand>

  <dataCommand name="CheckpointInfo_QueryCheckpointsByDevices" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
SELECT a.Id
     , b.DeviceNumber AS 'Dev_DeviceNumber'
     , b.DeviceName AS 'Dev_DeviceName'
     , a.[Description]
     , a.Flag
     , a.UpperLimit
     , a.LowerLimit
     , a.Remark
     , a.CreationDate
     , a.ModifiedDate
  FROM dms_coredb.dbo.DeviceCheckpoint AS a
  LEFT JOIN dms_coredb.dbo.DeviceInfo AS b ON a.DeviceNumber = b.DeviceNumber
 WHERE a.DeviceNumber IN (@DeviceNumbers)
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumbers" dbType="String" direction="Input" Size="20" />
    </params>
  </dataCommand>

  <!-- ***************************************** -->
  <!-- Device Operation Data: about Device State -->
  <!-- ***************************************** -->

  <dataCommand name="DeviceStateInfo_QueryDevicePointStatesByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @TableName VARCHAR(200) = 'DeviceOperationData_' + @DeviceNumber + '_' +  CONVERT(CHAR(4), YEAR(GETDATE()))
DECLARE @SelectDataSql NVARCHAR(MAX) = 'SELECT a.DeviceNumber
      , a.CollectorId
      , a.DateValue01
      , a.CharValue01
      , a.StringValue01
      , a.StringValue02
      , a.StringValue03
      , a.NumberValue01
      , a.NumberValue02
      , a.Remark
   FROM dms_coredb.dbo.' + @TableName + ' AS a
  WHERE a.DeviceNumber = @DeviceNumber 
    AND a.CollectorId = @CollectorId
    AND DATEDIFF(SECOND, @StartTime, a.DateValue01) > 0
    AND DATEDIFF(SECOND, a.DateValue01, @EndTime) > 0
  ORDER BY a.DateValue01'

EXEC sp_executesql @SelectDataSql, N'@DeviceNumber VARCHAR(20), 
                                     @CollectorId CHAR(3), 
                                     @StartTime DATETIME, 
                                     @EndTime DATETIME',
                                     @DeviceNumber = @DeviceNumber, 
                                     @CollectorId = @CollectorId, 
                                     @StartTime = @StartTime, 
                                     @EndTime = @EndTime
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@CollectorId" dbType="String" direction="Input" Size="3" />
      <param name="@StartTime" dbType="DateTime" direction="Input" />
      <param name="@EndTime" dbType="DateTime" direction="Input" />
    </params>
  </dataCommand>

  <dataCommand name="DeviceStateInfo_QueryDevicePeriodStatesByConditions" database="coredb" commandText="Text">
    <commandText>
      <![CDATA[
DECLARE @TempTable TABLE
(
    DeviceNumber VARCHAR(20),
    CollectorId CHAR(3),
    CharValue01 CHAR(1),
    DateValue01 DATETIME,
    StringValue01 VARCHAR(20),
    StringValue02 VARCHAR(20),
    StringValue03 VARCHAR(20),
    NumberValue01 DECIMAL,
    NumberValue02 DECIMAL,
    Remark NVARCHAR(20)
)

INSERT INTO @TempTable
SELECT TOP 1 a.DeviceNumber
     , a.CollectorId
     , a.CharValue01
     , a.DateValue01
     , a.StringValue01
     , a.StringValue02
     , a.StringValue03
     , a.NumberValue01
     , a.NumberValue02
     , a.Remark
  FROM dms_coredb.dbo.DeviceOperationData AS a
 WHERE a.DeviceNumber = @DeviceNumber
   AND a.CollectorId = @CollectorId
   AND DATEDIFF(SECOND, a.DateValue01, @StartTime) > 0

INSERT INTO @TempTable
SELECT a.DeviceNumber
     , a.CollectorId
     , a.CharValue01
     , a.DateValue01
     , a.StringValue01
     , a.StringValue02
     , a.StringValue03
     , a.NumberValue01
     , a.NumberValue02
     , a.Remark
  FROM dms_coredb.dbo.DeviceOperationData AS a
 WHERE a.DeviceNumber = @DeviceNumber
   AND a.CollectorId = @CollectorId
   AND DATEDIFF(SECOND, @StartTime, a.DateValue01) > 0
   AND DATEDIFF(SECOND, a.DateValue01, @EndTime) > 0

SELECT * from @TempTable ORDER BY DateValue01
      ]]>
    </commandText>
    <params>
      <param name="@DeviceNumber" dbType="String" direction="Input" Size="20" />
      <param name="@CollectorId" dbType="String" direction="Input" Size="3" />
      <param name="@StartTime" dbType="DateTime" direction="Input" />
      <param name="@EndTime" dbType="DateTime" direction="Input" />
    </params>
  </dataCommand>
</dataCommands>
